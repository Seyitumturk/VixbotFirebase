<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Conversation</title>
    <link rel="stylesheet" href="/main.css">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.16/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">


</head>

<body>
    <div class="wrapper">


        <!-- Component Start -->
        <div id="bigSidebar"
            class="flex flex-col items-center w-64 h-full overflow-hidden text-gray-400 bg-gray-900 rounded ">
            <a class="flex items-center w-full px-3 mt-3" href="#">
               
                <span class="ml-2 text-sm font-bold">VixBot</span>
            </a>
            <a class="flex items-center w-full h-12 px-3 mt-2 rounded hover:bg-gray-700 hover:text-gray-300 mt-20"
                href="/conversations">
                <!-- ... -->
                <span class="ml-2 text-sm font-medium">Ideate</span>
            </a>
            <!-- ... -->
            <!-- Products link -->
            <a class="flex items-center w-full h-12 px-3 mt-2 rounded hover:bg-gray-700 hover:text-gray-300"
                href="/products">
                <!-- ... -->
                <span class="ml-2 text-sm font-medium">Products</span>
            </a>
            <!-- Templates link -->
            <a class="flex items-center w-full h-12 px-3 mt-2 rounded hover:bg-gray-700 hover:text-gray-300"
                href="/templates">
                <!-- Add an appropriate SVG icon for Templates -->
                <span class="ml-2 text-sm font-medium">Templates</span>
            </a>
            <a class="flex items-center w-full h-12 px-3 mt-2 rounded hover:bg-gray-700 hover:text-gray-300"
                href="/conversations">
                <!-- Add an appropriate SVG icon for Collaborate -->
                <span class="ml-2 text-sm font-medium">Collaborate</span>
                <span class="ml-2 px-2 py-1 text-sm font-medium text-white bg-blue-600 ml-14 rounded">NEW</span>
            </a>


        </div>
        <!-- Component End  -->

        <div class="main-content">



            <div class="icon-menu-container">

                <div class="icon-menu">
                    <button type="button" class="expandable-btn">
                        <span class="material-icons">campaign</span>
                        Marketing
                    </button>
                    <div class="icon-menu-content">
                        <button type="button" class="circle-icon"><i class="material-icons">show_chart</i>
                            Sales</button>
                        <button type="button" class="circle-icon"><i class="material-icons">monetization_on</i>
                            Finance</button>
                        <button type="button" class="circle-icon"><i class="material-icons">people</i> HR</button>
                        <button type="button" class="circle-icon"><i class="material-icons">gavel</i> Legal</button>
                        <button type="button" class="circle-icon"><i class="material-icons">desktop_windows</i>
                            IT</button>
                        <button type="button" class="circle-icon"><i class="material-icons">build</i> Product
                            Dev</button>
                        <button type="button" class="circle-icon"><i class="material-icons">pie_chart</i>
                            Analytics</button>
                        <button type="button" class="circle-icon"><i class="material-icons">headset_mic</i> Customer
                            Service</button>
                        <button type="button" class="circle-icon"><i class="material-icons">create</i> Content
                            Creation</button>
                    </div>
                </div>


            </div>


            <div class="card shadow">
                <div class="card-body">
                    <div class="chat-content">
                        <div class="responses-container" id="responses-container">
                            <!-- Response cards go here -->

                            <div class="typing-animation" id="typing-animation">
                                <span></span>
                                <span></span>
                                <span></span>
                            </div>

                        </div>

                    </div>

                </div>

                <div class="card-footer-vb bg-gray-900 ">
                    <div class="form-container">
                        <form id="conversation-form" autocomplete="off" class="conversation-form">
                            <div class="gpt-input-group">
                                <input id="input-text-box" type="text" name="text"
                                    placeholder="Find your next golden idea...">
                                <button type="submit" class="generate-btn"> </button>
                            </div>
                        </form>
                    </div>

                    <div class="floating-btn-container">
                        <button id="floatingButton" class="floating-btn">+</button>
                    </div>


                    <!-- Template Modal -->
                    <div id="templateModal" class="modal">
                        <div class="modal-content">
                            <span class="close">&times;</span>
                            <div id="templateMenu">
                                <% templates.forEach((template)=> { %>
                                    <button class="template-item" data-template='<%- JSON.stringify(template) %>'>
                                        <%= template.template_name %>
                                    </button>
                                    <% }); %>
                            </div>
                        </div>
                    </div>



                    <!-- Product modal -->
                    <div id="productModal" class="modal">
                        <div class="modal-content">
                            <span class="close">&times;</span>
                            <div id="productMenu">
                                <% products.forEach((product)=> { %>
                                    <button class="product-item" data-product='<%- JSON.stringify(product) %>'>
                                        <%= product.product_name %>
                                    </button>
                                    <% }); %>
                            </div>
                        </div>
                    </div>


                    <div class="button-container">
                        <div class="action-buttons">
                            <div class="flex"> <!-- Add a flex container -->
                                <button id="chooseProductButton" class="action-button mr-2">Choose Product</button>
                                <button id="chooseTemplateButton" class="action-button">Choose Template</button>
                            </div>


                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const expandableBtn = document.getElementById("expandable-btn");
        const iconMenuContent = document.querySelector(".icon-menu-content");

        expandableBtn.addEventListener("click", function () {
            iconMenuContent.classList.toggle("hidden");
        });

        const circleIcons = document.querySelectorAll(".circle-icon");

        circleIcons.forEach(function (circleIcon) {
            circleIcon.addEventListener("click", function () {
                expandableBtn.innerHTML = circleIcon.innerHTML;
                iconMenuContent.classList.add("hidden");
            });
        });
    </script>

    <style>
        .hidden {
            display: none;
        }
    </style>











    <script>


        //Product Selection and Modal Handlres

        document.addEventListener("DOMContentLoaded", () => {
            // Get the modal and button elements
            const productModal = document.getElementById("productModal");
            const chooseProductButton = document.getElementById("chooseProductButton");

            // Add this event listener for the "Choose Product" button
            chooseProductButton.addEventListener("click", () => {
                productModal.style.display = "block";
            });

            // Close the product modal when the user clicks on the close button
            const closeModalButton = document.querySelector(".close");
            closeModalButton.addEventListener("click", () => {
                productModal.style.display = "none";
            });

            // Close the product modal when the user clicks outside the modal
            window.onclick = (event) => {
                if (event.target == productModal) {
                    productModal.style.display = "none";
                }
            };

            // Add event listener for product items
            const productItems = document.querySelectorAll(".product-item");
            productItems.forEach(item => {
                item.addEventListener("click", event => {
                    const product = JSON.parse(event.target.dataset.product);
                    localStorage.setItem("selectedProduct", JSON.stringify(product));
                    productModal.style.display = "none";
                });
            });
        });

        // Template Selection and  Modal Handlers 

        document.addEventListener("DOMContentLoaded", () => {
            // Get the modal and button elements
            const templateModal = document.getElementById("templateModal");
            const chooseTemplateButton = document.getElementById("chooseTemplateButton");

            // Add this event listener for the "Choose Template" button
            chooseTemplateButton.addEventListener("click", () => {
                templateModal.style.display = "block";
            });

            // Close the template modal when the user clicks on the close button
            const closeModalButton = document.querySelector(".close");
            closeModalButton.addEventListener("click", () => {
                templateModal.style.display = "none";
            });

            // Close the template modal when the user clicks outside the modal
            window.onclick = (event) => {
                if (event.target == templateModal) {
                    templateModal.style.display = "none";
                }
            };

            // Add event listener for template items
            const templateItems = document.querySelectorAll(".template-item");
            templateItems.forEach(item => {
                item.addEventListener("click", event => {
                    const template = JSON.parse(event.target.dataset.template);
                    localStorage.setItem("selectedTemplate", JSON.stringify(template));
                    templateModal.style.display = "none";
                });
            });
        });



        //Send form body to server: 

        let conversationHistory = [
            { role: "system", content: "You are a helpful assistant." }
        ];


        document.getElementById('conversation-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const inputTextBox = document.getElementById('input-text-box');
            const userMessage = inputTextBox.value;
            inputTextBox.value = '';

            addMessageToUI('user', userMessage);
            conversationHistory.push({ role: "user", content: userMessage });

            // Saving selected elemenets to local storage
            const selectedProduct = JSON.parse(localStorage.getItem("selectedProduct"));
            const selectedTemplate = JSON.parse(localStorage.getItem("selectedTemplate"));




            if (selectedProduct && selectedTemplate) {
                const data = { messages: conversationHistory, product: selectedProduct, template: selectedTemplate };

                const response = await fetch('/conversations', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data),
                });

                if (response.ok) {
                    const responseData = await response.json();
                    const botMessage = responseData.response;
                    conversationHistory.push({ role: "assistant", content: botMessage });
                    addMessageToUI('bot', botMessage);
                } else {
                    console.error('Error while sending request:', response.status, response.statusText);
                }
            } else {
                alert("Please choose a product and a template before sending a message.");
            }
        });





        // Adding GPT  messages to the UI 
        function addMessageToUI(role, message) {
            const messageContainer = document.createElement('div');
            messageContainer.className = `message-container ${role}`;

            const messageHeader = document.createElement('div');
            messageHeader.className = 'message-header';
            messageContainer.appendChild(messageHeader);

            const profileIcon = document.createElement('div');
            profileIcon.className = `profile-icon ${role}`;
            messageContainer.appendChild(profileIcon);

            messageHeader.appendChild(profileIcon);

            //Format response text
            const messageContent = document.createElement('div');
            messageContent.className = 'message-content';
            const formattedMessage = message.split('\n').filter(line => line.trim() !== '').map(line => {
                if (line.startsWith('- ') || line.startsWith('* ')) {
                    const listItem = document.createElement('li');
                    listItem.textContent = line.slice(2).trim();
                    return listItem.outerHTML;
                } else {
                    const paragraph = document.createElement('p');
                    paragraph.textContent = line.trim();
                    return paragraph.outerHTML;
                }
            }).join('');

            messageContent.innerHTML = formattedMessage;
            messageContainer.appendChild(messageContent);


            document.getElementById('responses-container').appendChild(messageContainer);
        }

        document.addEventListener('click', (e) => {
            if (!e.target.matches('.options-btn') && !e.target.matches('.options-dropdown') && !e.target.closest('.options-dropdown')) {
                const dropdowns = document.getElementsByClassName('options-dropdown');
                for (let i = 0; i < dropdowns.length; i++) {
                    dropdowns[i].style.display = 'none';
                }
            }
        });

    </script>

</body>

</html>